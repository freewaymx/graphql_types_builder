// This file was generated by graphql_types_builder package.
// Do not edit this file manually.

class Cargo {
	 final String? description;
	 final String? name;

	Cargo({
		 this.description,
		 this.name,
	});

	 factory Cargo.fromMap(Map<String, dynamic> map) {
		 return Cargo(
			description: map["description"],
			name: map["name"],
		);
	}


}

class CargoService {
	 final String? arrivePlace;
	 final String? contactNumber;
	 final String? departurePlace;
	 final String? description;
	 final String? dueOn;
	 final String? id;
	 final String? title;
	 final UserCarrier? user;

	CargoService({
		 this.arrivePlace,
		 this.contactNumber,
		 this.departurePlace,
		 this.description,
		 this.dueOn,
		 this.id,
		 this.title,
		 this.user,
	});

	 factory CargoService.fromMap(Map<String, dynamic> map) {
		 return CargoService(
			arrivePlace: map["arrivePlace"],
			contactNumber: map["contactNumber"],
			departurePlace: map["departurePlace"],
			description: map["description"],
			dueOn: map["dueOn"],
			id: map["id"],
			title: map["title"],
			user: UserCarrier.fromMap(map["user"]),
		);
	}


}

class CargoServiceCollection {
	 final CollectionMetadata? metadata;

	CargoServiceCollection({
		 this.metadata,
	});

	 factory CargoServiceCollection.fromMap(Map<String, dynamic> map) {
		 return CargoServiceCollection(
			metadata: CollectionMetadata.fromMap(map["metadata"]),
		);
	}


}

class CargoServiceFiltersAttributes {
	 final String? dueOn;
	 final String? term;

	CargoServiceFiltersAttributes({
		 this.dueOn,
		 this.term,
	});

	 factory CargoServiceFiltersAttributes.fromMap(Map<String, dynamic> map) {
		 return CargoServiceFiltersAttributes(
			dueOn: map["dueOn"],
			term: map["term"],
		);
	}


}

class Cellphone {
	 final String? lada;
	 final String? number;

	Cellphone({
		 this.lada,
		 this.number,
	});

	 factory Cellphone.fromMap(Map<String, dynamic> map) {
		 return Cellphone(
			lada: map["lada"],
			number: map["number"],
		);
	}


}

class CellphoneAttributes {
	 final String? lada;
	 final String? number;

	CellphoneAttributes({
		 this.lada,
		 this.number,
	});

	 factory CellphoneAttributes.fromMap(Map<String, dynamic> map) {
		 return CellphoneAttributes(
			lada: map["lada"],
			number: map["number"],
		);
	}


}

class CollectionMetadata {
	 final int? currentPage;
	 final int? limitValue;
	 final int? totalCount;
	 final int? totalPages;

	CollectionMetadata({
		 this.currentPage,
		 this.limitValue,
		 this.totalCount,
		 this.totalPages,
	});

	 factory CollectionMetadata.fromMap(Map<String, dynamic> map) {
		 return CollectionMetadata(
			currentPage: map["currentPage"],
			limitValue: map["limitValue"],
			totalCount: map["totalCount"],
			totalPages: map["totalPages"],
		);
	}


}

class CurrentUser {
	 final UserBuyer? buyerData;
	 final UserCarrier? carrierData;

	CurrentUser({
		 this.buyerData,
		 this.carrierData,
	});

	 factory CurrentUser.fromMap(Map<String, dynamic> map) {
		 return CurrentUser(
			buyerData: UserBuyer.fromMap(map["buyerData"]),
			carrierData: UserCarrier.fromMap(map["carrierData"]),
		);
	}


}

class User {
	 final Cellphone? cellphone;
	 final String? type;
	 final String? uuid;

	User({
		 this.cellphone,
		 this.type,
		 this.uuid,
	});

	 factory User.fromMap(Map<String, dynamic> map) {
		 return User(
			cellphone: Cellphone.fromMap(map["cellphone"]),
			type: map["type"],
			uuid: map["uuid"],
		);
	}


}

class UserAdminAttributes {
	 final String? role;
	 final String? email;

	UserAdminAttributes({
		 this.role,
		 this.email,
	});

	 factory UserAdminAttributes.fromMap(Map<String, dynamic> map) {
		 return UserAdminAttributes(
			role: map["role"],
			email: map["email"],
		);
	}


}

class UserBuyer {
	 final String? businessName;
	 final Cellphone? cellphone;
	 final String? email;
	 final String? fullName;
	 final String? moralPerson;
	 final String? physicalPerson;
	 final String? type;
	 final String? uuid;

	UserBuyer({
		 this.businessName,
		 this.cellphone,
		 this.email,
		 this.fullName,
		 this.moralPerson,
		 this.physicalPerson,
		 this.type,
		 this.uuid,
	});

	 factory UserBuyer.fromMap(Map<String, dynamic> map) {
		 return UserBuyer(
			businessName: map["businessName"],
			cellphone: Cellphone.fromMap(map["cellphone"]),
			email: map["email"],
			fullName: map["fullName"],
			moralPerson: map["moralPerson"],
			physicalPerson: map["physicalPerson"],
			type: map["type"],
			uuid: map["uuid"],
		);
	}


}

class UserBuyerAttributes {
	 final String? businessName;
	 final String? fullName;
	 final String? email;
	 final String? moralPerson;
	 final String? physicalPerson;

	UserBuyerAttributes({
		 this.businessName,
		 this.fullName,
		 this.email,
		 this.moralPerson,
		 this.physicalPerson,
	});

	 factory UserBuyerAttributes.fromMap(Map<String, dynamic> map) {
		 return UserBuyerAttributes(
			businessName: map["businessName"],
			fullName: map["fullName"],
			email: map["email"],
			moralPerson: map["moralPerson"],
			physicalPerson: map["physicalPerson"],
		);
	}


}

class UserCarrier {
	 final String? address;
	 final Cellphone? cellphone;
	 final String? companyName;
	 final String? legalCard;
	 final String? moralPerson;
	 final String? physicalPerson;
	 final double? rating;
	 final String? type;
	 final String? uuid;

	UserCarrier({
		 this.address,
		 this.cellphone,
		 this.companyName,
		 this.legalCard,
		 this.moralPerson,
		 this.physicalPerson,
		 this.rating,
		 this.type,
		 this.uuid,
	});

	 factory UserCarrier.fromMap(Map<String, dynamic> map) {
		 return UserCarrier(
			address: map["address"],
			cellphone: Cellphone.fromMap(map["cellphone"]),
			companyName: map["companyName"],
			legalCard: map["legalCard"],
			moralPerson: map["moralPerson"],
			physicalPerson: map["physicalPerson"],
			rating: map["rating"],
			type: map["type"],
			uuid: map["uuid"],
		);
	}


}

class UserCarrierAttributes {
	 final String? address;
	 final String? companyName;
	 final String? email;
	 final String? fullName;
	 final String? legalCard;
	 final String? moralPerson;
	 final String? physicalPerson;

	UserCarrierAttributes({
		 this.address,
		 this.companyName,
		 this.email,
		 this.fullName,
		 this.legalCard,
		 this.moralPerson,
		 this.physicalPerson,
	});

	 factory UserCarrierAttributes.fromMap(Map<String, dynamic> map) {
		 return UserCarrierAttributes(
			address: map["address"],
			companyName: map["companyName"],
			email: map["email"],
			fullName: map["fullName"],
			legalCard: map["legalCard"],
			moralPerson: map["moralPerson"],
			physicalPerson: map["physicalPerson"],
		);
	}


}

